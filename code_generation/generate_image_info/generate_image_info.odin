package generate_image_info

import "core:os"
import "core:strings"
import "core:fmt"
import "core:path/slashpath"
//import "core:image/png"
//import "core:image"

INPUT_DIR :: "images"
OUTPUT_FILE :: "images.odin"


main :: proc() {
	d, d_err := os.open(INPUT_DIR, os.O_RDONLY)
	assert(d_err == nil, "Failed opening '" + INPUT_DIR + "' folder")
	defer os.close(d)
	
	{
		stat, stat_err := os.fstat(d)
		assert(stat_err == nil, "Failed checking '" + INPUT_DIR + "' info")
		assert(stat.is_dir, "'" + INPUT_DIR + "' is not a directory")
		os.file_info_delete(stat)
	}

	input_files, _ := os.read_dir(d, -1)

	f, _ := os.open(OUTPUT_FILE, os.O_WRONLY | os.O_CREATE | os.O_TRUNC)
	defer os.close(f)

	images: [dynamic]os.File_Info

	for i in input_files {
		if !strings.has_suffix(i.name, ".png") {
			continue
		}

		append(&images, i)
	}


	fmt.fprintln(f,
`// This file is generated by generate_image_info.odin
package image_viewer

Image :: struct {
	modified_time: time.Time,
	data: []u8,
}

Image_Name :: enum {`
)

	for i in images {
		fmt.fprintfln(f, "	%v,", strings.to_ada_case(slashpath.name(i.name)))
	}

	fmt.fprintln(f,
`}

images := [Image_Name]Image {`
)

	for i in images {
		fmt.fprintfln(f, "	{{ data = #load(\"images/%v\"), modified_time = \"%v\" }},", i.name, i.modification_time)
	}

	fmt.fprintln(f, "}")
}